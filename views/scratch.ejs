<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>刮刮卡</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        body {
            background: linear-gradient(rgba(0,0,0,0.7), rgba(0,0,0,0.7)), 
                        radial-gradient(circle at center, #667eea 0%, #764ba2 100%);
            color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 10px;
        }
        
        .board {
            max-width: 750px;
            margin: auto;
            background: rgba(255, 255, 255, 0.08);
            border: 2px solid rgba(255,255,255,0.2);
            border-radius: 16px;
            padding: 1.5rem;
            position: relative;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
        }
        
        .labels {
            margin-bottom: 1rem;
            font-size: 1.1rem;
            font-weight: bold;
        }
        
        #scratchContainer {
            position: relative;
            width: 100%;
            aspect-ratio: 5 / 4;
            background: #eee;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.4);
        }
        
        #scratchCanvas {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 5;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        
        #scratchContent {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            grid-template-rows: repeat(5, 1fr);
            font-weight: bold;
            font-size: 0.9rem;
            color: #000;
            gap: 1px;
        }
        
        .grid-item {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            border: 1px solid rgba(0,0,0,0.1);
            background: #fff;
            padding: 2px;
            min-height: 40px;
        }
        
        .grid-item div:first-child {
            font-size: 1.1rem;
            font-weight: bold;
            color: #333;
        }
        
        .grid-item div:last-child {
            font-size: 0.8rem;
            color: #666;
            margin-top: 2px;
        }
        
        .winning-number {
            background: #fff3cd !important;
            border-color: #ffc107 !important;
        }
        
        .winning-number div:first-child {
            color: #856404 !important;
        }
        
        .winning-number div:last-child {
            color: #f57c00 !important;
            font-weight: bold !important;
        }
        
        .scratch-ui {
            margin-top: 1.5rem;
            position: relative;
            z-index: 10;
        }
        
        button {
            padding: 0.8rem 1.5rem;
            background: #ffcc00;
            color: #000;
            font-weight: bold;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            margin: 0.5rem;
            transition: all 0.3s;
        }
        
        button:hover {
            background: #ffd700;
            transform: translateY(-2px);
        }
        
        button:disabled {
            background: #95a5a6;
            cursor: not-allowed;
            transform: none;
        }
        
        #verifyResult {
            margin-top: 1rem;
        }
        
        /* 手机端优化 */
        @media (max-width: 768px) {
            .board {
                max-width: 100%;
                margin: 10px;
                padding: 1rem;
            }
            
            .game-container {
                padding: 10px;
                width: 100%;
                max-width: 400px;
                margin: 0 auto;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                text-align: center;
            }
            
            .game-container h2 {
                font-size: 1.5rem;
                margin-bottom: 10px;
            }
            
            .labels {
                font-size: 1rem;
                margin-bottom: 0.8rem;
            }
            
            #scratchContainer {
                margin: 15px 0;
            }
            
            .grid-item {
                font-size: 0.7rem;
                padding: 4px 2px;
                min-height: 35px;
            }
            
            .grid-item div:first-child {
                font-size: 0.9rem;
            }
            
            .grid-item div:last-child {
                font-size: 0.7rem;
            }
            
            .scratch-ui {
                margin-top: 1rem;
            }
            
            button {
                padding: 0.6rem 1rem;
                font-size: 14px;
                margin: 0.3rem;
            }
            
            #verifyResult {
                font-size: 1rem;
                margin-top: 0.8rem;
            }
            
        }
    </style>
</head>
<body>
    <a href="/" class="back-button">← 返回</a>
    <div class="game-container">
        <div class="board">
            <h2>🎯 刮刮卡</h2>
            <p>玩家：<%= username %></p>
            <div class="labels">前5个格子是中奖号码，后20个格子刮开找匹配！</div>
            <div id="scratchContainer">
                <div id="scratchContent"></div>
                <canvas id="scratchCanvas"></canvas>
            </div>

            <div class="scratch-ui">
                <button onclick="startScratch()">开始刮奖</button>
                <button onclick="verifyWin()">🎯 验证结果</button>
                <p id="verifyResult" style="font-weight: bold; font-size: 1.2rem;"></p>
            </div>
        </div>
    </div>

    <script>
        const username = "<%= username %>";
        const csrfToken = "<%= csrfToken %>";
        
        // Polyfill for crypto.randomUUID
        if (!crypto.randomUUID) {
            crypto.randomUUID = function () {
                return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
                    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                );
            };
        }
        
        let hasVerified = true;
        
        function createCard(num, prize, isWinning = false) {
            const cell = document.createElement('div');
            cell.className = isWinning ? 'grid-item winning-number' : 'grid-item';
            cell.innerHTML = `<div>${num}</div><div>${prize || ''}</div>`;
            return cell;
        }
        
        async function startScratch() {
            if (!hasVerified) {
                alert('请先验证当前结果，再开始下一轮刮奖！');
                return;
            }
            hasVerified = false;
            
            // 初始化Canvas遮罩层 - 防止数字闪现
            const canvas = document.getElementById('scratchCanvas');
            const ctx = canvas.getContext('2d');
            canvas.width = canvas.offsetWidth;
            canvas.height = canvas.offsetHeight;
            
            // 创建银色遮罩层
            ctx.fillStyle = '#c0c0c0';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // 添加纹理效果
            for (let i = 0; i < 50; i++) {
                ctx.fillStyle = `rgba(${160 + Math.random() * 80}, ${160 + Math.random() * 80}, ${160 + Math.random() * 80}, 0.3)`;
                ctx.fillRect(Math.random() * canvas.width, Math.random() * canvas.height, 5, 5);
            }
            
            ctx.globalCompositeOperation = 'destination-out';
            
            // 请求数据
            const timestamp = Math.floor(Date.now() / 1000);
            const nonce = crypto.randomUUID();
            
            try {
                const res = await fetch('/api/scratch', {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({ username, timestamp, nonce })
                });
                
                const data = await res.json();
                if (!data.success) {
                    alert('❌ ' + data.message);
                    return;
                }
                
                const container = document.getElementById('scratchContent');
                container.innerHTML = '';
                
                // 先添加5个中奖号码
                data.winningNumbers.forEach(n => {
                    container.appendChild(createCard(n, '中奖号码', true));
                });
                
                // 再添加20个刮奖号码
                data.slots.forEach(({ num, amount, prize }) => {
                    container.appendChild(createCard(num, amount || prize, false));
                });
                
                // 刮刮逻辑 - 完全按照原版
                let isDrawing = false, lastX = null, lastY = null;
                
                // 鼠标事件
                canvas.onmousedown = (e) => {
                    isDrawing = true;
                    const rect = canvas.getBoundingClientRect();
                    lastX = e.clientX - rect.left;
                    lastY = e.clientY - rect.top;
                    drawAt(lastX, lastY);
                };
                
                canvas.onmouseup = canvas.onmouseleave = () => {
                    isDrawing = false;
                    lastX = lastY = null;
                };
                
                canvas.onmousemove = e => {
                    if (!isDrawing) return;
                    const rect = canvas.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    drawAt(x, y);
                };
                
                // 触摸事件（移动端）
                canvas.ontouchstart = e => {
                    isDrawing = true;
                    e.preventDefault();
                    const rect = canvas.getBoundingClientRect();
                    const touch = e.touches[0];
                    lastX = touch.clientX - rect.left;
                    lastY = touch.clientY - rect.top;
                    drawAt(lastX, lastY);
                };
                
                canvas.ontouchmove = e => {
                    if (!isDrawing) return;
                    e.preventDefault();
                    const rect = canvas.getBoundingClientRect();
                    const touch = e.touches[0];
                    const x = touch.clientX - rect.left;
                    const y = touch.clientY - rect.top;
                    drawAt(x, y);
                };
                
                canvas.ontouchend = () => {
                    isDrawing = false;
                    lastX = lastY = null;
                };
                
                // 绘制函数
                function drawAt(x, y) {
                    if (lastX !== null && lastY !== null) {
                        const dx = x - lastX;
                        const dy = y - lastY;
                        const dist = Math.sqrt(dx * dx + dy * dy);
                        const steps = Math.ceil(dist / 4);
                        for (let i = 0; i <= steps; i++) {
                            const lerpX = lastX + (dx * i / steps);
                            const lerpY = lastY + (dy * i / steps);
                            ctx.beginPath();
                            ctx.arc(lerpX, lerpY, 20, 0, Math.PI * 2);
                            ctx.fill();
                        }
                    }
                    lastX = x;
                    lastY = y;
                }
                
                document.getElementById('verifyResult').textContent = '';
                
            } catch (error) {
                alert('网络错误，请重试');
                console.error('Error:', error);
            }
        }
        
        function verifyWin() {
            const grid = Array.from(document.querySelectorAll('#scratchContent .grid-item'));
            const winNums = grid.slice(0, 5).map(cell => parseInt(cell.children[0].textContent));
            const userSlots = grid.slice(5);
            
            const matched = [];
            
            userSlots.forEach(cell => {
                const num = parseInt(cell.children[0].textContent);
                const amount = cell.children[1].textContent;
                if (winNums.includes(num) && amount !== '0') {
                    matched.push({ num, amount });
                }
            });
            
            const result = document.getElementById('verifyResult');
            if (matched.length > 0) {
                const totalAmount = matched.reduce((sum, m) => {
                    const amt = parseInt(m.amount.replace('+', ''));
                    return sum + (isNaN(amt) ? 0 : amt);
                }, 0);
                result.textContent = `🎉 恭喜中奖！总金额：+${totalAmount}`;
                result.style.color = '#00ff88';
            } else {
                result.textContent = '😢 很遗憾，这次没有中奖。再试一次！';
                result.style.color = '#ff5555';
            }
            
            hasVerified = true;
        }
    </script>
</body>
</html>